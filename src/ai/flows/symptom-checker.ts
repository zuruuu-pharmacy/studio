
'use server';
/**
 * @fileOverview AI-powered symptom checker with a two-step triage process.
 * 
 * - getSymptomAnalysis - A function that handles the two-step analysis.
 * - GetSymptomAnalysisInput - The input type for the function.
 * - GetSymptomAnalysisOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { findAvailableDoctors } from '@/ai/tools/healthcare-finder';

// Optional patient history schema for providing more context
const detailedHistorySchema = z.object({
  pastMedicalHistory: z.string().optional(),
  medicationHistory: z.string().optional(),
  allergyHistory: z.string().optional(),
  socialHistory: z.string().optional(),
}).optional();

// Schema for a single follow-up question generated by the AI
const TriageQuestionSchema = z.object({
  question: z.string().describe('A simple, relevant follow-up question for the patient.'),
  type: z.enum(['yes_no', 'multiple_choice', 'text']).describe('The type of answer expected.'),
  choices: z.array(z.string()).optional().describe('A list of options for multiple-choice questions.'),
});

// Schema for the answer provided by the user to a triage question
const TriageAnswerSchema = z.object({
    question: z.string(),
    answer: z.string(),
});

// Input schema for the main flow
const GetSymptomAnalysisInputSchema = z.object({
  initialSymptoms: z.string().describe("The patient's initial symptoms in their own words."),
  detailedHistory: detailedHistorySchema,
  // Answers are optional; they are only provided in the second step of the flow.
  answers: z.array(TriageAnswerSchema).optional().describe("The patient's answers to the AI-generated triage questions."),
});
export type GetSymptomAnalysisInput = z.infer<typeof GetSymptomAnalysisInputSchema>;

const organSystems = z.enum([
    'Cardiovascular',
    'Respiratory',
    'Gastrointestinal',
    'Nervous',
    'Musculoskeletal',
    'Integumentary',
    'Urinary',
    'Endocrine',
    'Lymphatic/Immune',
    'Reproductive',
    'Hematologic',
    'General',
]);

const SuggestedDoctorSchema = z.object({
    name: z.string(),
    specialty: z.string(),
    phone: z.string(),
    address: z.string(),
});

// Output schema for the main flow
const GetSymptomAnalysisOutputSchema = z.object({
  // In step 1, the flow returns triage questions.
  triageQuestions: z.array(TriageQuestionSchema).optional().describe('A list of follow-up questions to ask the patient.'),
  
  // In step 2, the flow returns the final analysis.
  analysis: z.object({
    possibleConditions: z.array(z.object({
        name: z.string().describe('The name of the possible condition.'),
        likelihood: z.enum(['High', 'Moderate', 'Low']).describe('The likelihood of this condition.'),
    })).describe('A list of the top 2-3 most likely conditions.'),
    severity: z.enum(['Red', 'Yellow', 'Green']).describe('The overall severity level (Red: Urgent, Yellow: Moderate, Green: Mild).'),
    recommendation: z.string().describe('The recommended next step for the patient (e.g., "Go to ER", "Consult a doctor").'),
    mostRelevantSystem: organSystems.describe("The single most relevant organ system for these symptoms (e.g., 'Cardiovascular', 'Respiratory')."),
    summaryForHistory: z.string().describe("A concise summary of the encounter (symptoms and possible conditions) suitable for adding to a patient's medical history file."),
    suggestedDoctors: z.array(SuggestedDoctorSchema).optional().describe('A list of suggested doctors if the recommendation is to consult one.'),
    disclaimer: z.string().default('This is not a medical diagnosis. Please consult a healthcare professional for advice.'),
  }).optional(),
});
export type GetSymptomAnalysisOutput = z.infer<typeof GetSymptomAnalysisOutputSchema>;

// The exported server action that the client will call
export async function getSymptomAnalysis(input: GetSymptomAnalysisInput): Promise<GetSymptomAnalysisOutput> {
  return symptomCheckerFlow(input);
}


const symptomCheckerFlow = ai.defineFlow(
  {
    name: 'symptomCheckerFlow',
    inputSchema: GetSymptomAnalysisInputSchema,
    outputSchema: GetSymptomAnalysisOutputSchema,
  },
  async (input) => {
    // If we have answers, this is the second step. We need to generate the final analysis.
    if (input.answers && input.answers.length > 0) {
      const analysisPrompt = ai.definePrompt({
        name: 'symptomAnalysisFinalPrompt',
        input: { schema: GetSymptomAnalysisInputSchema },
        output: { schema: GetSymptomAnalysisOutputSchema },
        tools: [findAvailableDoctors],
        prompt: `You are an AI medical assistant performing a symptom analysis.
        
        You have already asked triage questions and received the patient's answers.
        Now, analyze all the information to provide a final report.

        **Patient's Initial Symptoms:**
        {{{initialSymptoms}}}

        **Patient's Answers to Triage Questions:**
        {{#each answers}}
        - Q: {{this.question}}
        - A: {{this.answer}}
        {{/each}}

        {{#if detailedHistory}}
        **Relevant Patient History:**
        - Past Medical History: {{detailedHistory.pastMedicalHistory}}
        - Medication History: {{detailedHistory.medicationHistory}}
        - Allergies: {{detailedHistory.allergyHistory}}
        - Social History: {{detailedHistory.socialHistory}}
        {{/if}}

        **Your Task:**
        1.  Identify the top 2-3 possible conditions based on all available information.
        2.  Assign a likelihood (High, Moderate, Low) to each condition.
        3.  Determine a final severity classification (Red, Yellow, Green).
            - Red: Potential emergency (e.g., chest pain with shortness of breath, signs of stroke). Recommendation should be "Go to ER immediately or call an ambulance".
            - Yellow: Needs medical attention soon (e.g., persistent fever, non-urgent but concerning symptoms). Recommendation should be "Consult a doctor soon".
            - Green: Likely mild and can be managed with home care.
        4.  Provide a clear, actionable recommendation based on the severity.
        5.  **If the recommendation is to "Consult a doctor soon", you MUST use the 'findAvailableDoctors' tool to suggest nearby doctors.**
        6.  Based on the symptoms and your analysis, determine the single most relevant organ system.
        7.  Create a concise summary of the encounter (initial symptoms, key answers, and possible conditions) that can be saved to the patient's history under the relevant organ system section.
        8.  Include the standard disclaimer.

        Respond ONLY with the final analysis object.
        `,
      });

      const { output } = await analysisPrompt(input);
      return output!;

    } else {
      // If we don't have answers, this is the first step. We need to generate triage questions.
      const triagePrompt = ai.definePrompt({
        name: 'symptomAnalysisTriagePrompt',
        input: { schema: GetSymptomAnalysisInputSchema },
        output: { schema: GetSymptomAnalysisOutputSchema },
        prompt: `You are an AI medical assistant performing a symptom triage.

        A patient has provided their initial symptoms. Your task is to generate a short list of simple, highly relevant follow-up questions to help narrow down the possible conditions.

        **Patient's Initial Symptoms:**
        {{{initialSymptoms}}}
        
        {{#if detailedHistory}}
        **Relevant Patient History:**
        - Past Medical History: {{detailedHistory.pastMedicalHistory}}
        - Medication History: {{detailedHistory.medicationHistory}}
        - Allergies: {{detailedHistory.allergyHistory}}
        - Social History: {{detailedHistory.socialHistory}}
        {{/if}}

        **Your Task:**
        - Generate 3-5 critical follow-up questions.
        - Questions should be easy for a layperson to understand (no medical jargon).
        - Choose the question type ('yes_no', 'multiple_choice', 'text') that is most appropriate for each question.
        
        Respond ONLY with the triage questions object.
        `,
      });

      const { output } = await triagePrompt(input);
      return output!;
    }
  }
);
